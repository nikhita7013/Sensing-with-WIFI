{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst videoMapping = {\n  0: {\n    name: \"Sit\",\n    path: \"/videos/sit.mp4\"\n  },\n  1: {\n    name: \"Forward Bend\",\n    path: \"/videos/forward_bend.mp4\"\n  },\n  2: {\n    name: \"Warrior Pose\",\n    path: \"/videos/warrior.mp4\"\n  },\n  3: {\n    name: \"Triangle Pose\",\n    path: \"/videos/triangle.mp4\"\n  },\n  4: {\n    name: \"Vajrasana\",\n    path: \"/videos/vajrasan.mp4\"\n  },\n  5: {\n    name: \"Backward Bend\",\n    path: \"/videos/backwardbend_pose.mp4\"\n  }\n};\nconst CsvGraphPlotter = () => {\n  _s();\n  const [data, setData] = useState([]); // Parsed CSV data\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\n  const [chartData, setChartData] = useState(null); // Graph data\n  const [currentActivity, setCurrentActivity] = useState(\"Unknown Activity\"); // Current activity label\n  const [videoSrc, setVideoSrc] = useState(\"\"); // Current video source\n\n  // Update video and graph when data changes\n  useEffect(() => {\n    if (data.length > 0) {\n      const interval = setInterval(() => {\n        updateChartAndVideo(currentIndex);\n        setCurrentIndex(prevIndex => (prevIndex + 50) % data.length); // Loop through rows\n      }, 2000); // Update every 1 second\n      return () => clearInterval(interval); // Cleanup interval\n    }\n  }, [data, currentIndex]);\n\n  // File upload handler\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: result => {\n          const parsedData = result.data.filter(row => row.length === 53); // Validate rows with exactly 53 columns\n          setData(parsedData);\n          updateChartAndVideo(0); // Initialize chart and video\n        },\n        header: false,\n        skipEmptyLines: true\n      });\n    }\n  };\n\n  // Update chart and video for the current chunk of rows\n  const updateChartAndVideo = startIndex => {\n    const endIndex = startIndex + 50 > data.length ? data.length : startIndex + 50;\n    const rows = data.slice(startIndex, endIndex); // Get rows for the current chunk\n    const xLabels = rows.map((_, idx) => `Row ${startIndex + idx + 1}`); // X-axis labels\n\n    // Create datasets for graph\n    const datasets = Array.from({\n      length: 52\n    }, (_, colIdx) => ({\n      label: `Column ${colIdx + 1}`,\n      data: rows.map(row => parseFloat(row[colIdx])),\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`,\n      borderWidth: 1,\n      fill: false\n    }));\n    setChartData({\n      labels: xLabels,\n      datasets\n    });\n\n    // Handle video update\n    const firstRow = rows[0];\n    if (firstRow && firstRow.length > 52) {\n      const label = parseInt(firstRow[52], 10); // Get the label from the last column\n      if (videoMapping[label]) {\n        setCurrentActivity(videoMapping[label].name);\n        setVideoSrc(videoMapping[label].path);\n      } else {\n        setCurrentActivity(\"Unknown Activity\");\n        setVideoSrc(\"\");\n      }\n    } else {\n      setCurrentActivity(\"Unknown Activity\");\n      setVideoSrc(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CSV File Graph Plotter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileUpload,\n      style: {\n        margin: \"20px\",\n        padding: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        padding: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"45%\"\n        },\n        children: chartData ? /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                title: {\n                  display: true,\n                  text: \"time.\"\n                },\n                grid: {\n                  display: true\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: \"Values\"\n                },\n                grid: {\n                  display: true\n                }\n              }\n            },\n            plugins: {\n              legend: {\n                display: false\n              },\n              tooltip: {\n                mode: \"index\",\n                intersect: false\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"#888\"\n          },\n          children: \"Upload a CSV file to display the graph.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"45%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Current Activity: \", currentActivity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), videoSrc ? /*#__PURE__*/_jsxDEV(\"video\", {\n          // Force React to remount the video element when videoSrc changes\n          width: \"100%\",\n          height: \"400\",\n          loop: true,\n          autoPlay: true,\n          muted: true,\n          controls: false,\n          style: {\n            objectFit: \"contain\",\n            pointerEvents: \"none\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: videoSrc,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), \"Your browser does not support the video tag.\"]\n        }, videoSrc, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No video available for the current activity.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(CsvGraphPlotter, \"vRSAPCvLV11gCuxkuDKKiwU6pPY=\");\n_c = CsvGraphPlotter;\nexport default CsvGraphPlotter;\nvar _c;\n$RefreshReg$(_c, \"CsvGraphPlotter\");","map":{"version":3,"names":["React","useState","useEffect","Papa","Line","jsxDEV","_jsxDEV","videoMapping","name","path","CsvGraphPlotter","_s","data","setData","currentIndex","setCurrentIndex","chartData","setChartData","currentActivity","setCurrentActivity","videoSrc","setVideoSrc","length","interval","setInterval","updateChartAndVideo","prevIndex","clearInterval","handleFileUpload","event","file","target","files","parse","complete","result","parsedData","filter","row","header","skipEmptyLines","startIndex","endIndex","rows","slice","xLabels","map","_","idx","datasets","Array","from","colIdx","label","parseFloat","borderColor","Math","random","borderWidth","fill","labels","firstRow","parseInt","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","margin","display","justifyContent","width","options","responsive","maintainAspectRatio","scales","x","title","text","grid","y","plugins","legend","tooltip","mode","intersect","color","height","loop","autoPlay","muted","controls","objectFit","pointerEvents","src","_c","$RefreshReg$"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\n\r\nconst videoMapping = {\r\n  0: { name: \"Sit\", path: \"/videos/sit.mp4\" },\r\n  1: { name: \"Forward Bend\", path: \"/videos/forward_bend.mp4\" },\r\n  2: { name: \"Warrior Pose\", path: \"/videos/warrior.mp4\" },\r\n  3: { name: \"Triangle Pose\", path: \"/videos/triangle.mp4\" },\r\n  4: { name: \"Vajrasana\", path: \"/videos/vajrasan.mp4\" },\r\n  5: { name: \"Backward Bend\", path: \"/videos/backwardbend_pose.mp4\" },\r\n};\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]); // Parsed CSV data\r\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\r\n  const [chartData, setChartData] = useState(null); // Graph data\r\n  const [currentActivity, setCurrentActivity] = useState(\"Unknown Activity\"); // Current activity label\r\n  const [videoSrc, setVideoSrc] = useState(\"\"); // Current video source\r\n\r\n  // Update video and graph when data changes\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const interval = setInterval(() => {\r\n        updateChartAndVideo(currentIndex);\r\n        setCurrentIndex((prevIndex) => (prevIndex + 50) % data.length); // Loop through rows\r\n      }, 2000); // Update every 1 second\r\n      return () => clearInterval(interval); // Cleanup interval\r\n    }\r\n  }, [data, currentIndex]);\r\n\r\n  // File upload handler\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (result) => {\r\n          const parsedData = result.data.filter((row) => row.length === 53); // Validate rows with exactly 53 columns\r\n          setData(parsedData);\r\n          updateChartAndVideo(0); // Initialize chart and video\r\n        },\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Update chart and video for the current chunk of rows\r\n  const updateChartAndVideo = (startIndex) => {\r\n    const endIndex = startIndex + 50 > data.length ? data.length : startIndex + 50;\r\n    const rows = data.slice(startIndex, endIndex); // Get rows for the current chunk\r\n    const xLabels = rows.map((_, idx) => `Row ${startIndex + idx + 1}`); // X-axis labels\r\n\r\n    // Create datasets for graph\r\n    const datasets = Array.from({ length: 52 }, (_, colIdx) => ({\r\n      label: `Column ${colIdx + 1}`,\r\n      data: rows.map((row) => parseFloat(row[colIdx])),\r\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`,\r\n      borderWidth: 1,\r\n      fill: false,\r\n    }));\r\n\r\n    setChartData({\r\n      labels: xLabels,\r\n      datasets,\r\n    });\r\n\r\n    // Handle video update\r\n    const firstRow = rows[0];\r\n    if (firstRow && firstRow.length > 52) {\r\n      const label = parseInt(firstRow[52], 10); // Get the label from the last column\r\n      if (videoMapping[label]) {\r\n        setCurrentActivity(videoMapping[label].name);\r\n        setVideoSrc(videoMapping[label].path);\r\n      } else {\r\n        setCurrentActivity(\"Unknown Activity\");\r\n        setVideoSrc(\"\");\r\n      }\r\n    } else {\r\n      setCurrentActivity(\"Unknown Activity\");\r\n      setVideoSrc(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>CSV File Graph Plotter</h1>\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ margin: \"20px\", padding: \"10px\" }}\r\n      />\r\n\r\n      <div style={{ display: \"flex\", justifyContent: \"space-around\", padding: \"20px\" }}>\r\n        {/* Graph Section */}\r\n        <div style={{ width: \"45%\" }}>\r\n          {chartData ? (\r\n            <Line\r\n              data={chartData}\r\n              options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: { title: { display: true, text: \"time.\" }, grid: { display: true } },\r\n                  y: { title: { display: true, text: \"Values\" }, grid: { display: true } },\r\n                },\r\n                plugins: {\r\n                  legend: { display: false },\r\n                  tooltip: { mode: \"index\", intersect: false },\r\n                },\r\n              }}\r\n            />\r\n          ) : (\r\n            <p style={{ color: \"#888\" }}>Upload a CSV file to display the graph.</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Video Section */}\r\n        <div style={{ width: \"45%\" }}>\r\n            <h2>Current Activity: {currentActivity}</h2>\r\n            {videoSrc ? (\r\n            <video\r\n            key={videoSrc} // Force React to remount the video element when videoSrc changes\r\n            width=\"100%\"\r\n            height=\"400\"\r\n            loop\r\n            autoPlay\r\n            muted\r\n            controls={false}\r\n            style= {{ objectFit: \"contain\",\r\n                pointerEvents: \"none\"\r\n\r\n            }}\r\n            >\r\n            <source src={videoSrc} type=\"video/mp4\" />\r\n            Your browser does not support the video tag.\r\n            </video>\r\n        ) : (\r\n            <p>No video available for the current activity.</p>\r\n        )}\r\n        </div>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}