{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CsvGraphPlotter = () => {\n  _s();\n  const [data, setData] = useState([]); // Store the parsed CSV data\n  const [chartData, setChartData] = useState(null); // Store the graph data\n\n  // Handle CSV file upload and parse\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: result => {\n          const parsedData = result.data.filter(row => row.length === 53); // Filter rows with exactly 53 columns\n          setData(parsedData);\n          createGraphData(parsedData); // Generate graph data\n        },\n        header: false,\n        skipEmptyLines: true\n      });\n    }\n  };\n\n  // Prepare graph data\n  const createGraphData = parsedData => {\n    const rows = parsedData.slice(0, 50); // Select the first 50 rows\n    const xLabels = rows.map((_, idx) => `Row ${idx + 1}`); // X-axis: Row numbers\n    const datasets = Array.from({\n      length: 52\n    }, (_, colIdx) => ({\n      label: `Column ${colIdx + 1}`,\n      data: rows.map(row => parseFloat(row[colIdx])),\n      // Map column values to each row\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`,\n      borderWidth: 1,\n      fill: false\n    }));\n    setChartData({\n      labels: xLabels,\n      datasets\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CSV File Graph Plotter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileUpload,\n      style: {\n        margin: \"20px\",\n        padding: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px auto\",\n        width: \"80%\",\n        height: \"500px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: \"Rows\",\n                font: {\n                  size: 14\n                }\n              },\n              grid: {\n                display: true\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: \"Values\",\n                font: {\n                  size: 14\n                }\n              },\n              grid: {\n                display: true\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: \"right\"\n            },\n            tooltip: {\n              mode: \"index\",\n              intersect: false\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"#888\"\n      },\n      children: \"Upload a CSV file to plot the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(CsvGraphPlotter, \"s/TQpzUed3+MQsiBn6ArR2HjXSo=\");\n_c = CsvGraphPlotter;\nexport default CsvGraphPlotter;\nvar _c;\n$RefreshReg$(_c, \"CsvGraphPlotter\");","map":{"version":3,"names":["React","useState","Papa","Line","jsxDEV","_jsxDEV","CsvGraphPlotter","_s","data","setData","chartData","setChartData","handleFileUpload","event","file","target","files","parse","complete","result","parsedData","filter","row","length","createGraphData","header","skipEmptyLines","rows","slice","xLabels","map","_","idx","datasets","Array","from","colIdx","label","parseFloat","borderColor","Math","random","borderWidth","fill","labels","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","margin","width","height","options","responsive","maintainAspectRatio","scales","x","title","display","text","font","size","grid","y","plugins","legend","position","tooltip","mode","intersect","color","_c","$RefreshReg$"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]); // Store the parsed CSV data\r\n  const [chartData, setChartData] = useState(null); // Store the graph data\r\n\r\n  // Handle CSV file upload and parse\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (result) => {\r\n          const parsedData = result.data.filter((row) => row.length === 53); // Filter rows with exactly 53 columns\r\n          setData(parsedData);\r\n          createGraphData(parsedData); // Generate graph data\r\n        },\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Prepare graph data\r\n  const createGraphData = (parsedData) => {\r\n    const rows = parsedData.slice(0, 50); // Select the first 50 rows\r\n    const xLabels = rows.map((_, idx) => `Row ${idx + 1}`); // X-axis: Row numbers\r\n    const datasets = Array.from({ length: 52 }, (_, colIdx) => ({\r\n      label: `Column ${colIdx + 1}`,\r\n      data: rows.map((row) => parseFloat(row[colIdx])), // Map column values to each row\r\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`,\r\n      borderWidth: 1,\r\n      fill: false,\r\n    }));\r\n\r\n    setChartData({\r\n      labels: xLabels,\r\n      datasets,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>CSV File Graph Plotter</h1>\r\n      {/* File Upload Button */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ margin: \"20px\", padding: \"10px\" }}\r\n      />\r\n      {/* Render Graph */}\r\n      {chartData ? (\r\n        <div style={{ margin: \"20px auto\", width: \"80%\", height: \"500px\" }}>\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: {\r\n                  title: { display: true, text: \"Rows\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                },\r\n                y: {\r\n                  title: { display: true, text: \"Values\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                },\r\n              },\r\n              plugins: {\r\n                legend: { display: true, position: \"right\" },\r\n                tooltip: { mode: \"index\", intersect: false },\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <p style={{ color: \"#888\" }}>Upload a CSV file to plot the graph.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}