{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\"; // Automatically imports the required chart components\n\nconst CsvGraphPlotter = () => {\n  const [data, setData] = useState([]); // Stores the parsed data from the CSV\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the starting row for plotting\n  const [chartData, setChartData] = useState({}); // Stores the data for the graph\n\n  // Automatically update the graph every second based on data\n  useEffect(() => {\n    if (data.length > 0) {\n      const interval = setInterval(() => {\n        updateChart(currentIndex);\n        setCurrentIndex(prevIndex => (prevIndex + 50) % data.length);\n      }, 1000); // Change graph every 1 second\n      return () => clearInterval(interval); // Cleanup interval\n    }\n  }, [data, currentIndex]);\n\n  // Handle CSV file upload and parsing\n  const handleFileUpload = event => {\n    const file = event.target.files[0]; // Get the uploaded file\n    if (file) {\n      Papa.parse(file, {\n        complete: result => {\n          const parsedData = result.data.filter(row => row.length === 53); // Ensure all rows have 53 columns\n          setData(parsedData); // Store the parsed data\n        },\n        header: false,\n        skipEmptyLines: true // Skip any empty rows\n      });\n    }\n  };\n\n  // Update the chart for the current slice of data (50 rows)\n  const updateChart = index => {\n    const rows = data.slice(index, index + 10); // Select the next 50 rows\n    const labels = Array.from({\n      length: 52\n    }, (_, i) => `Column ${i + 1}`); // Generate labels for columns\n    const datasets = rows.map((row, i) => ({\n      label: `Row ${index + i + 1}`,\n      data: row.slice(0, 52).map(Number),\n      // Convert string data to numbers\n      fill: false,\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.8)` // Random color\n    }));\n    setChartData({\n      labels,\n      datasets\n    }); // Update chart data state\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"CSV File Graph Plotter\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".csv\",\n    onChange: handleFileUpload,\n    style: {\n      margin: \"20px 0\",\n      padding: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), chartData.labels ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"20px auto\",\n      width: \"90%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"#888\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Upload a CSV file to display the graph.\"));\n};\nexport default CsvGraphPlotter;","map":{"version":3,"names":["React","useState","useEffect","Papa","Line","CsvGraphPlotter","data","setData","currentIndex","setCurrentIndex","chartData","setChartData","length","interval","setInterval","updateChart","prevIndex","clearInterval","handleFileUpload","event","file","target","files","parse","complete","result","parsedData","filter","row","header","skipEmptyLines","index","rows","slice","labels","Array","from","_","i","datasets","map","label","Number","fill","borderColor","Math","random","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","margin","width","options","responsive","maintainAspectRatio","color"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\"; // Automatically imports the required chart components\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]); // Stores the parsed data from the CSV\r\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the starting row for plotting\r\n  const [chartData, setChartData] = useState({}); // Stores the data for the graph\r\n\r\n  // Automatically update the graph every second based on data\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const interval = setInterval(() => {\r\n        updateChart(currentIndex);\r\n        setCurrentIndex((prevIndex) => (prevIndex + 50) % data.length);\r\n      }, 1000); // Change graph every 1 second\r\n      return () => clearInterval(interval); // Cleanup interval\r\n    }\r\n  }, [data, currentIndex]);\r\n\r\n  // Handle CSV file upload and parsing\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0]; // Get the uploaded file\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (result) => {\r\n          const parsedData = result.data.filter((row) => row.length === 53); // Ensure all rows have 53 columns\r\n          setData(parsedData); // Store the parsed data\r\n        },\r\n        header: false,\r\n        skipEmptyLines: true, // Skip any empty rows\r\n      });\r\n    }\r\n  };\r\n\r\n  // Update the chart for the current slice of data (50 rows)\r\n  const updateChart = (index) => {\r\n    const rows = data.slice(index, index + 10); // Select the next 50 rows\r\n    const labels = Array.from({ length: 52 }, (_, i) => `Column ${i + 1}`); // Generate labels for columns\r\n    const datasets = rows.map((row, i) => ({\r\n      label: `Row ${index + i + 1}`,\r\n      data: row.slice(0, 52).map(Number), // Convert string data to numbers\r\n      fill: false,\r\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.8)`, // Random color\r\n    }));\r\n\r\n    setChartData({ labels, datasets }); // Update chart data state\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>CSV File Graph Plotter</h1>\r\n      {/* File upload button */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ margin: \"20px 0\", padding: \"10px\" }}\r\n      />\r\n      {chartData.labels ? (\r\n        <div style={{ margin: \"20px auto\", width: \"90%\" }}>\r\n          <Line data={chartData} options={{ responsive: true, maintainAspectRatio: false }} />\r\n        </div>\r\n      ) : (\r\n        <p style={{ color: \"#888\" }}>Upload a CSV file to display the graph.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}