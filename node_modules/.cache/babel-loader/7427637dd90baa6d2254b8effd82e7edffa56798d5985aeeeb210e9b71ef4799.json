{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CsvGraphPlotter = () => {\n  _s();\n  const [data, setData] = useState([]); // Stores parsed CSV data\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\n  const [chartData, setChartData] = useState(null); // Stores data for graph plotting\n  const [activity, setActivity] = useState(\"\"); // Stores the activity name\n  const [videoSrc, setVideoSrc] = useState(\"\"); // Stores the video path\n\n  // Map activity labels to activity names and video paths\n  const activityMap = {\n    0: {\n      name: \"Sit\",\n      video: \"/videos/sit.mp4\"\n    },\n    1: {\n      name: \"Forward Bend\",\n      video: \"/videos/forward_bend.mp4\"\n    },\n    2: {\n      name: \"Warrior Pose\",\n      video: \"/videos/warrior_pose.mp4\"\n    },\n    3: {\n      name: \"Triangle Pose\",\n      video: \"/videos/triangle_pose.mp4\"\n    },\n    4: {\n      name: \"Vajrasan\",\n      video: \"/videos/vajrasan.mp4\"\n    },\n    5: {\n      name: \"Backward Bend Pose\",\n      video: \"/videos/backward_bend_pose.mp4\"\n    }\n  };\n\n  // Automatically update the graph and activity every second\n  useEffect(() => {\n    if (data.length > 0) {\n      const interval = setInterval(() => {\n        updateChart(currentIndex);\n        setCurrentIndex(prevIndex => (prevIndex + 50) % data.length); // Loop through all rows\n      }, 1000); // Update every 1 second\n      return () => clearInterval(interval); // Clear interval when component unmounts\n    }\n  }, [data, currentIndex]);\n\n  // Handle CSV file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: result => {\n          const parsedData = result.data.filter(row => row.length === 53); // Validate rows\n          setData(parsedData); // Save parsed data\n          updateChart(0); // Start charting with the first 50 rows\n        },\n        header: false,\n        skipEmptyLines: true\n      });\n    }\n  };\n\n  // Update chart for the current chunk of rows\n  const updateChart = startIndex => {\n    const endIndex = startIndex + 50 > data.length ? data.length : startIndex + 50;\n    const rows = data.slice(startIndex, endIndex); // Get the next chunk of rows\n    const xLabels = rows.map((_, idx) => `Row ${startIndex + idx + 1}`); // Labels for rows (x-axis)\n\n    // Create datasets for each column\n    const datasets = Array.from({\n      length: 52\n    }, (_, colIdx) => ({\n      label: `Column ${colIdx + 1}`,\n      data: rows.map(row => parseFloat(row[colIdx])),\n      // Use column values for y-axis\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`,\n      // Random colors\n      borderWidth: 1,\n      fill: false\n    }));\n    setChartData({\n      labels: xLabels,\n      // Set x-axis labels\n      datasets\n    });\n\n    // Get the activity label from the 53rd column (last column)\n    const label = rows[0][52]; // First row, 53rd column\n    if (activityMap[label]) {\n      setActivity(activityMap[label].name); // Set the corresponding activity name\n      setVideoSrc(activityMap[label].video); // Set the corresponding video\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CSV File Graph Plotter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileUpload,\n      style: {\n        margin: \"20px\",\n        padding: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px auto\",\n        width: \"80%\",\n        height: \"500px\"\n      },\n      children: chartData ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: \"Rows\",\n                font: {\n                  size: 14\n                }\n              },\n              grid: {\n                display: true\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: \"Values\",\n                font: {\n                  size: 14\n                }\n              },\n              grid: {\n                display: true\n              },\n              min: 0,\n              // Set minimum Y value to 0\n              max: 20,\n              // Limit Y axis to a maximum value of 20\n              ticks: {\n                stepSize: 2,\n                // Step size to control spacing between ticks (optional)\n                callback: value => value.toFixed(2) // Optionally format the y-axis tick labels\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: \"right\"\n            },\n            tooltip: {\n              mode: \"index\",\n              intersect: false\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"#888\"\n        },\n        children: \"Upload a CSV file to display the graph.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Activity: \", activity]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px\"\n      },\n      children: videoSrc && /*#__PURE__*/_jsxDEV(\"video\", {\n        width: \"80%\",\n        height: \"auto\",\n        controls: true,\n        children: [/*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoSrc,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(CsvGraphPlotter, \"LDGA8HmuEWJfzTw3DOlehoDbkT8=\");\n_c = CsvGraphPlotter;\nexport default CsvGraphPlotter;\nvar _c;\n$RefreshReg$(_c, \"CsvGraphPlotter\");","map":{"version":3,"names":["React","useState","useEffect","Papa","Line","jsxDEV","_jsxDEV","CsvGraphPlotter","_s","data","setData","currentIndex","setCurrentIndex","chartData","setChartData","activity","setActivity","videoSrc","setVideoSrc","activityMap","name","video","length","interval","setInterval","updateChart","prevIndex","clearInterval","handleFileUpload","event","file","target","files","parse","complete","result","parsedData","filter","row","header","skipEmptyLines","startIndex","endIndex","rows","slice","xLabels","map","_","idx","datasets","Array","from","colIdx","label","parseFloat","borderColor","Math","random","borderWidth","fill","labels","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","margin","width","height","options","responsive","maintainAspectRatio","scales","x","title","display","text","font","size","grid","y","min","max","ticks","stepSize","callback","value","toFixed","plugins","legend","position","tooltip","mode","intersect","color","controls","src","_c","$RefreshReg$"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]); // Stores parsed CSV data\r\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\r\n  const [chartData, setChartData] = useState(null); // Stores data for graph plotting\r\n  const [activity, setActivity] = useState(\"\"); // Stores the activity name\r\n  const [videoSrc, setVideoSrc] = useState(\"\"); // Stores the video path\r\n\r\n  // Map activity labels to activity names and video paths\r\n  const activityMap = {\r\n    0: { name: \"Sit\", video: \"/videos/sit.mp4\" },\r\n    1: { name: \"Forward Bend\", video: \"/videos/forward_bend.mp4\" },\r\n    2: { name: \"Warrior Pose\", video: \"/videos/warrior_pose.mp4\" },\r\n    3: { name: \"Triangle Pose\", video: \"/videos/triangle_pose.mp4\" },\r\n    4: { name: \"Vajrasan\", video: \"/videos/vajrasan.mp4\" },\r\n    5: { name: \"Backward Bend Pose\", video: \"/videos/backward_bend_pose.mp4\" },\r\n  };\r\n\r\n  // Automatically update the graph and activity every second\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const interval = setInterval(() => {\r\n        updateChart(currentIndex);\r\n        setCurrentIndex((prevIndex) => (prevIndex + 50) % data.length); // Loop through all rows\r\n      }, 1000); // Update every 1 second\r\n      return () => clearInterval(interval); // Clear interval when component unmounts\r\n    }\r\n  }, [data, currentIndex]);\r\n\r\n  // Handle CSV file upload\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (result) => {\r\n          const parsedData = result.data.filter((row) => row.length === 53); // Validate rows\r\n          setData(parsedData); // Save parsed data\r\n          updateChart(0); // Start charting with the first 50 rows\r\n        },\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Update chart for the current chunk of rows\r\n  const updateChart = (startIndex) => {\r\n    const endIndex = startIndex + 50 > data.length ? data.length : startIndex + 50;\r\n    const rows = data.slice(startIndex, endIndex); // Get the next chunk of rows\r\n    const xLabels = rows.map((_, idx) => `Row ${startIndex + idx + 1}`); // Labels for rows (x-axis)\r\n\r\n    // Create datasets for each column\r\n    const datasets = Array.from({ length: 52 }, (_, colIdx) => ({\r\n      label: `Column ${colIdx + 1}`,\r\n      data: rows.map((row) => parseFloat(row[colIdx])), // Use column values for y-axis\r\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`, // Random colors\r\n      borderWidth: 1,\r\n      fill: false,\r\n    }));\r\n\r\n    setChartData({\r\n      labels: xLabels, // Set x-axis labels\r\n      datasets,\r\n    });\r\n\r\n    // Get the activity label from the 53rd column (last column)\r\n    const label = rows[0][52]; // First row, 53rd column\r\n    if (activityMap[label]) {\r\n      setActivity(activityMap[label].name); // Set the corresponding activity name\r\n      setVideoSrc(activityMap[label].video); // Set the corresponding video\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>CSV File Graph Plotter</h1>\r\n      {/* File Upload */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ margin: \"20px\", padding: \"10px\" }}\r\n      />\r\n\r\n      {/* First block: Graph */}\r\n      <div style={{ margin: \"20px auto\", width: \"80%\", height: \"500px\" }}>\r\n        {chartData ? (\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: {\r\n                  title: { display: true, text: \"Rows\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                },\r\n                y: {\r\n                  title: { display: true, text: \"Values\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                  min: 0, // Set minimum Y value to 0\r\n                  max: 20, // Limit Y axis to a maximum value of 20\r\n                  ticks: {\r\n                    stepSize: 2, // Step size to control spacing between ticks (optional)\r\n                    callback: (value) => value.toFixed(2), // Optionally format the y-axis tick labels\r\n                  },\r\n                },\r\n              },\r\n              plugins: {\r\n                legend: { display: true, position: \"right\" },\r\n                tooltip: { mode: \"index\", intersect: false },\r\n              },\r\n            }}\r\n          />\r\n        ) : (\r\n          <p style={{ color: \"#888\" }}>Upload a CSV file to display the graph.</p>\r\n        )}\r\n      </div>\r\n\r\n      {/* Second block: Activity Name */}\r\n      <div style={{ margin: \"20px\" }}>\r\n        <h2>Activity: {activity}</h2>\r\n      </div>\r\n\r\n      {/* Third block: Video */}\r\n      <div style={{ margin: \"20px\" }}>\r\n        {videoSrc && (\r\n          <video width=\"80%\" height=\"auto\" controls>\r\n            <source src={videoSrc} type=\"video/mp4\" />\r\n            Your browser does not support the video tag.\r\n          </video>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAMkB,WAAW,GAAG;IAClB,CAAC,EAAE;MAAEC,IAAI,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAkB,CAAC;IAC5C,CAAC,EAAE;MAAED,IAAI,EAAE,cAAc;MAAEC,KAAK,EAAE;IAA2B,CAAC;IAC9D,CAAC,EAAE;MAAED,IAAI,EAAE,cAAc;MAAEC,KAAK,EAAE;IAA2B,CAAC;IAC9D,CAAC,EAAE;MAAED,IAAI,EAAE,eAAe;MAAEC,KAAK,EAAE;IAA4B,CAAC;IAChE,CAAC,EAAE;MAAED,IAAI,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAuB,CAAC;IACtD,CAAC,EAAE;MAAED,IAAI,EAAE,oBAAoB;MAAEC,KAAK,EAAE;IAAiC;EAC3E,CAAC;;EAED;EACAnB,SAAS,CAAC,MAAM;IACd,IAAIO,IAAI,CAACa,MAAM,GAAG,CAAC,EAAE;MACnB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCC,WAAW,CAACd,YAAY,CAAC;QACzBC,eAAe,CAAEc,SAAS,IAAK,CAACA,SAAS,GAAG,EAAE,IAAIjB,IAAI,CAACa,MAAM,CAAC,CAAC,CAAC;MAClE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACV,OAAO,MAAMK,aAAa,CAACJ,QAAQ,CAAC,CAAC,CAAC;IACxC;EACF,CAAC,EAAE,CAACd,IAAI,EAAEE,YAAY,CAAC,CAAC;;EAExB;EACA,MAAMiB,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,EAAE;MACR3B,IAAI,CAAC8B,KAAK,CAACH,IAAI,EAAE;QACfI,QAAQ,EAAGC,MAAM,IAAK;UACpB,MAAMC,UAAU,GAAGD,MAAM,CAAC1B,IAAI,CAAC4B,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAAChB,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC;UACnEZ,OAAO,CAAC0B,UAAU,CAAC,CAAC,CAAC;UACrBX,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;QACDc,MAAM,EAAE,KAAK;QACbC,cAAc,EAAE;MAClB,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMf,WAAW,GAAIgB,UAAU,IAAK;IAClC,MAAMC,QAAQ,GAAGD,UAAU,GAAG,EAAE,GAAGhC,IAAI,CAACa,MAAM,GAAGb,IAAI,CAACa,MAAM,GAAGmB,UAAU,GAAG,EAAE;IAC9E,MAAME,IAAI,GAAGlC,IAAI,CAACmC,KAAK,CAACH,UAAU,EAAEC,QAAQ,CAAC,CAAC,CAAC;IAC/C,MAAMG,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAK,OAAOP,UAAU,GAAGO,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;;IAErE;IACA,MAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAE7B,MAAM,EAAE;IAAG,CAAC,EAAE,CAACyB,CAAC,EAAEK,MAAM,MAAM;MAC1DC,KAAK,EAAE,UAAUD,MAAM,GAAG,CAAC,EAAE;MAC7B3C,IAAI,EAAEkC,IAAI,CAACG,GAAG,CAAER,GAAG,IAAKgB,UAAU,CAAChB,GAAG,CAACc,MAAM,CAAC,CAAC,CAAC;MAAE;MAClDG,WAAW,EAAE,QAAQC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,KAAKD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,KAAKD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,QAAQ;MAAE;MAClGC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE;IACR,CAAC,CAAC,CAAC;IAEH7C,YAAY,CAAC;MACX8C,MAAM,EAAEf,OAAO;MAAE;MACjBI;IACF,CAAC,CAAC;;IAEF;IACA,MAAMI,KAAK,GAAGV,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,IAAIxB,WAAW,CAACkC,KAAK,CAAC,EAAE;MACtBrC,WAAW,CAACG,WAAW,CAACkC,KAAK,CAAC,CAACjC,IAAI,CAAC,CAAC,CAAC;MACtCF,WAAW,CAACC,WAAW,CAACkC,KAAK,CAAC,CAAChC,KAAK,CAAC,CAAC,CAAC;IACzC;EACF,CAAC;EAED,oBACEf,OAAA;IAAKuD,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACnD1D,OAAA;MAAA0D,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE/B9D,OAAA;MACE+D,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,MAAM;MACbC,QAAQ,EAAE3C,gBAAiB;MAC3BiC,KAAK,EAAE;QAAEW,MAAM,EAAE,MAAM;QAAET,OAAO,EAAE;MAAO;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eAGF9D,OAAA;MAAKuD,KAAK,EAAE;QAAEW,MAAM,EAAE,WAAW;QAAEC,KAAK,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAQ,CAAE;MAAAV,QAAA,EAChEnD,SAAS,gBACRP,OAAA,CAACF,IAAI;QACHK,IAAI,EAAEI,SAAU;QAChB8D,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,mBAAmB,EAAE,KAAK;UAC1BC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,KAAK,EAAE;gBAAEC,OAAO,EAAE,IAAI;gBAAEC,IAAI,EAAE,MAAM;gBAAEC,IAAI,EAAE;kBAAEC,IAAI,EAAE;gBAAG;cAAE,CAAC;cAC1DC,IAAI,EAAE;gBAAEJ,OAAO,EAAE;cAAK;YACxB,CAAC;YACDK,CAAC,EAAE;cACDN,KAAK,EAAE;gBAAEC,OAAO,EAAE,IAAI;gBAAEC,IAAI,EAAE,QAAQ;gBAAEC,IAAI,EAAE;kBAAEC,IAAI,EAAE;gBAAG;cAAE,CAAC;cAC5DC,IAAI,EAAE;gBAAEJ,OAAO,EAAE;cAAK,CAAC;cACvBM,GAAG,EAAE,CAAC;cAAE;cACRC,GAAG,EAAE,EAAE;cAAE;cACTC,KAAK,EAAE;gBACLC,QAAQ,EAAE,CAAC;gBAAE;gBACbC,QAAQ,EAAGC,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAE;cACzC;YACF;UACF,CAAC;UACDC,OAAO,EAAE;YACPC,MAAM,EAAE;cAAEd,OAAO,EAAE,IAAI;cAAEe,QAAQ,EAAE;YAAQ,CAAC;YAC5CC,OAAO,EAAE;cAAEC,IAAI,EAAE,OAAO;cAAEC,SAAS,EAAE;YAAM;UAC7C;QACF;MAAE;QAAAlC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,gBAEF9D,OAAA;QAAGuD,KAAK,EAAE;UAAEuC,KAAK,EAAE;QAAO,CAAE;QAAApC,QAAA,EAAC;MAAuC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACxE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAGN9D,OAAA;MAAKuD,KAAK,EAAE;QAAEW,MAAM,EAAE;MAAO,CAAE;MAAAR,QAAA,eAC7B1D,OAAA;QAAA0D,QAAA,GAAI,YAAU,EAACjD,QAAQ;MAAA;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eAGN9D,OAAA;MAAKuD,KAAK,EAAE;QAAEW,MAAM,EAAE;MAAO,CAAE;MAAAR,QAAA,EAC5B/C,QAAQ,iBACPX,OAAA;QAAOmE,KAAK,EAAC,KAAK;QAACC,MAAM,EAAC,MAAM;QAAC2B,QAAQ;QAAArC,QAAA,gBACvC1D,OAAA;UAAQgG,GAAG,EAAErF,QAAS;UAACoD,IAAI,EAAC;QAAW;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gDAE5C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IACR;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5D,EAAA,CAtIID,eAAe;AAAAgG,EAAA,GAAfhG,eAAe;AAwIrB,eAAeA,eAAe;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}