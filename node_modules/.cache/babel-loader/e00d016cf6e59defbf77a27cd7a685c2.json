{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nconst CsvGraphPlotter = () => {\n  const [data, setData] = useState([]); // Stores parsed CSV data\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current row\n  const [chartData, setChartData] = useState(null); // Stores the chart data\n\n  // Automatically update the graph every second\n  useEffect(() => {\n    if (data.length > 0) {\n      const interval = setInterval(() => {\n        updateChart(currentIndex); // Update chart for the current row\n        setCurrentIndex(prevIndex => (prevIndex + 1) % data.length); // Loop through rows\n      }, 1000); // Update every 1 second\n      return () => clearInterval(interval); // Clear interval on component unmount\n    }\n  }, [data, currentIndex]);\n\n  // Handle CSV file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: result => {\n          const parsedData = result.data.filter(row => row.length === 53); // Validate rows\n          setData(parsedData); // Save parsed data\n          updateChart(0); // Start charting with the first row\n        },\n        header: false,\n        skipEmptyLines: true\n      });\n    }\n  };\n\n  // Update the chart for the current row\n  const updateChart = rowIndex => {\n    const row = data[rowIndex]; // Get the current row\n    const xLabels = Array.from({\n      length: 52\n    }, (_, idx) => `Column ${idx + 1}`); // X-axis: Columns\n    const yValues = row.slice(0, 52).map(value => parseFloat(value)); // Y-axis: Values of the row\n\n    setChartData({\n      labels: xLabels,\n      datasets: [{\n        label: `Row ${rowIndex + 1}`,\n        data: yValues,\n        borderColor: \"rgba(75, 192, 192, 0.6)\",\n        backgroundColor: \"rgba(75, 192, 192, 0.4)\",\n        borderWidth: 2,\n        pointRadius: 3,\n        fill: true\n      }]\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"CSV File Graph Plotter\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".csv\",\n    onChange: handleFileUpload,\n    style: {\n      margin: \"20px\",\n      padding: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), chartData ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"20px auto\",\n      width: \"80%\",\n      height: \"500px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: \"Columns\",\n            font: {\n              size: 14\n            }\n          },\n          grid: {\n            display: true\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: \"Values\",\n            font: {\n              size: 14\n            }\n          },\n          grid: {\n            display: true\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          display: true,\n          position: \"top\"\n        },\n        tooltip: {\n          mode: \"index\",\n          intersect: false\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"#888\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"Upload a CSV file to display the graph.\"));\n};\nexport default CsvGraphPlotter;","map":{"version":3,"names":["React","useState","useEffect","Papa","Line","CsvGraphPlotter","data","setData","currentIndex","setCurrentIndex","chartData","setChartData","length","interval","setInterval","updateChart","prevIndex","clearInterval","handleFileUpload","event","file","target","files","parse","complete","result","parsedData","filter","row","header","skipEmptyLines","rowIndex","xLabels","Array","from","_","idx","yValues","slice","map","value","parseFloat","labels","datasets","label","borderColor","backgroundColor","borderWidth","pointRadius","fill","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","margin","width","height","options","responsive","maintainAspectRatio","scales","x","title","display","text","font","size","grid","y","plugins","legend","position","tooltip","mode","intersect","color"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]); // Stores parsed CSV data\r\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current row\r\n  const [chartData, setChartData] = useState(null); // Stores the chart data\r\n\r\n  // Automatically update the graph every second\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const interval = setInterval(() => {\r\n        updateChart(currentIndex); // Update chart for the current row\r\n        setCurrentIndex((prevIndex) => (prevIndex + 1) % data.length); // Loop through rows\r\n      }, 1000); // Update every 1 second\r\n      return () => clearInterval(interval); // Clear interval on component unmount\r\n    }\r\n  }, [data, currentIndex]);\r\n\r\n  // Handle CSV file upload\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (result) => {\r\n          const parsedData = result.data.filter((row) => row.length === 53); // Validate rows\r\n          setData(parsedData); // Save parsed data\r\n          updateChart(0); // Start charting with the first row\r\n        },\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Update the chart for the current row\r\n  const updateChart = (rowIndex) => {\r\n    const row = data[rowIndex]; // Get the current row\r\n    const xLabels = Array.from({ length: 52 }, (_, idx) => `Column ${idx + 1}`); // X-axis: Columns\r\n    const yValues = row.slice(0, 52).map((value) => parseFloat(value)); // Y-axis: Values of the row\r\n\r\n    setChartData({\r\n      labels: xLabels,\r\n      datasets: [\r\n        {\r\n          label: `Row ${rowIndex + 1}`,\r\n          data: yValues,\r\n          borderColor: \"rgba(75, 192, 192, 0.6)\",\r\n          backgroundColor: \"rgba(75, 192, 192, 0.4)\",\r\n          borderWidth: 2,\r\n          pointRadius: 3,\r\n          fill: true,\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>CSV File Graph Plotter</h1>\r\n      {/* File Upload */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ margin: \"20px\", padding: \"10px\" }}\r\n      />\r\n      {/* Graph */}\r\n      {chartData ? (\r\n        <div style={{ margin: \"20px auto\", width: \"80%\", height: \"500px\" }}>\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: {\r\n                  title: { display: true, text: \"Columns\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                },\r\n                y: {\r\n                  title: { display: true, text: \"Values\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                },\r\n              },\r\n              plugins: {\r\n                legend: { display: true, position: \"top\" },\r\n                tooltip: { mode: \"index\", intersect: false },\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <p style={{ color: \"#888\" }}>Upload a CSV file to display the graph.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}