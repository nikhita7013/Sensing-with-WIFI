{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport labelVideoMapping from \"./labelVideoMapping\"; // Import labelVideoMapping\n\nconst CsvGraphPlotter = () => {\n  const [data, setData] = useState([]); // Stores parsed CSV data\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\n  const [chartData, setChartData] = useState(null); // Stores data for graph plotting\n  const [activity, setActivity] = useState(\"Unknown Activity\"); // Store current activity name\n  const [videoSrc, setVideoSrc] = useState(\"\"); // Store the current video source\n\n  useEffect(() => {\n    if (data.length > 0) {\n      const interval = setInterval(() => {\n        updateChart(currentIndex);\n        setCurrentIndex(prevIndex => (prevIndex + 50) % data.length); // Loop through all rows\n      }, 1000); // Update every 1 second\n      return () => clearInterval(interval); // Clear interval when component unmounts\n    }\n  }, [data, currentIndex]);\n\n  // Handle CSV file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: result => {\n          const parsedData = result.data.filter(row => row.length === 53); // Validate rows\n          setData(parsedData); // Save parsed data\n          updateChart(0); // Start charting with the first 50 rows\n        },\n        header: false,\n        skipEmptyLines: true\n      });\n    }\n  };\n\n  // Update chart for the current chunk of rows\n  const updateChart = startIndex => {\n    const endIndex = startIndex + 50 > data.length ? data.length : startIndex + 50;\n    const rows = data.slice(startIndex, endIndex); // Get the next chunk of rows\n    const xLabels = rows.map((_, idx) => `Row ${startIndex + idx + 1}`); // Labels for rows (x-axis)\n\n    // Create datasets for each column\n    const datasets = Array.from({\n      length: 52\n    }, (_, colIdx) => ({\n      label: `Column ${colIdx + 1}`,\n      data: rows.map(row => parseFloat(row[colIdx])),\n      // Use column values for y-axis\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`,\n      // Random colors\n      borderWidth: 1,\n      fill: false\n    }));\n    setChartData({\n      labels: xLabels,\n      // Set x-axis labels\n      datasets\n    });\n\n    // Access the 53rd column for the activity label (the label is located in index 52)\n    const firstRow = rows[0];\n    if (firstRow && firstRow.length > 52) {\n      const label = firstRow[52]; // 53rd column (index 52)\n\n      // Debugging: Check the current activity and corresponding video\n      console.log('Current label:', label);\n      if (labelVideoMapping[label]) {\n        const videoPath = labelVideoMapping[label].video;\n        console.log('Video path:', videoPath); // Debugging: Check if the correct video is selected\n\n        setActivity(labelVideoMapping[label].name); // Set activity name\n        setVideoSrc(videoPath); // Set the video source (dynamically updates)\n      } else {\n        setActivity(\"Unknown Activity\");\n        setVideoSrc(\"\"); // No video available\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"CSV File Graph Plotter\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".csv\",\n    onChange: handleFileUpload,\n    style: {\n      margin: \"20px\",\n      padding: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-around\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"45%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, chartData ? /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: \"Rows\",\n            font: {\n              size: 14\n            }\n          },\n          grid: {\n            display: true\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: \"Values\",\n            font: {\n              size: 14\n            }\n          },\n          grid: {\n            display: true\n          },\n          min: 0,\n          // Set minimum Y value to 0\n          max: 20,\n          // Limit Y axis to a maximum value of 20\n          ticks: {\n            stepSize: 2,\n            // Step size to control spacing between ticks (optional)\n            callback: value => value.toFixed(2) // Optionally format the y-axis tick labels\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          display: true,\n          position: \"right\"\n        },\n        tooltip: {\n          mode: \"index\",\n          intersect: false\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"#888\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, \"Upload a CSV file to display the graph.\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"45%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, \"Current Activity: \", activity), videoSrc ? /*#__PURE__*/React.createElement(\"video\", {\n    width: \"100%\",\n    height: \"400\",\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"source\", {\n    src: videoSrc,\n    type: \"video/mp4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }), \"Your browser does not support the video tag.\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, \"No video available for the current activity.\"))));\n};\nexport default CsvGraphPlotter;","map":{"version":3,"names":["React","useState","useEffect","Papa","Line","labelVideoMapping","CsvGraphPlotter","data","setData","currentIndex","setCurrentIndex","chartData","setChartData","activity","setActivity","videoSrc","setVideoSrc","length","interval","setInterval","updateChart","prevIndex","clearInterval","handleFileUpload","event","file","target","files","parse","complete","result","parsedData","filter","row","header","skipEmptyLines","startIndex","endIndex","rows","slice","xLabels","map","_","idx","datasets","Array","from","colIdx","label","parseFloat","borderColor","Math","random","borderWidth","fill","labels","firstRow","console","log","videoPath","video","name","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","margin","display","justifyContent","width","options","responsive","maintainAspectRatio","scales","x","title","text","font","size","grid","y","min","max","ticks","stepSize","callback","value","toFixed","plugins","legend","position","tooltip","mode","intersect","color","height","controls","src"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\nimport labelVideoMapping from \"./labelVideoMapping\";  // Import labelVideoMapping\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]); // Stores parsed CSV data\r\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\r\n  const [chartData, setChartData] = useState(null); // Stores data for graph plotting\r\n  const [activity, setActivity] = useState(\"Unknown Activity\"); // Store current activity name\r\n  const [videoSrc, setVideoSrc] = useState(\"\"); // Store the current video source\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const interval = setInterval(() => {\r\n        updateChart(currentIndex);\r\n        setCurrentIndex((prevIndex) => (prevIndex + 50) % data.length); // Loop through all rows\r\n      }, 1000); // Update every 1 second\r\n      return () => clearInterval(interval); // Clear interval when component unmounts\r\n    }\r\n  }, [data, currentIndex]);\r\n\r\n  // Handle CSV file upload\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (result) => {\r\n          const parsedData = result.data.filter((row) => row.length === 53); // Validate rows\r\n          setData(parsedData); // Save parsed data\r\n          updateChart(0); // Start charting with the first 50 rows\r\n        },\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Update chart for the current chunk of rows\r\n  const updateChart = (startIndex) => {\r\n    const endIndex = startIndex + 50 > data.length ? data.length : startIndex + 50;\r\n    const rows = data.slice(startIndex, endIndex); // Get the next chunk of rows\r\n    const xLabels = rows.map((_, idx) => `Row ${startIndex + idx + 1}`); // Labels for rows (x-axis)\r\n\r\n    // Create datasets for each column\r\n    const datasets = Array.from({ length: 52 }, (_, colIdx) => ({\r\n      label: `Column ${colIdx + 1}`,\r\n      data: rows.map((row) => parseFloat(row[colIdx])), // Use column values for y-axis\r\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`, // Random colors\r\n      borderWidth: 1,\r\n      fill: false,\r\n    }));\r\n\r\n    setChartData({\r\n      labels: xLabels, // Set x-axis labels\r\n      datasets,\r\n    });\r\n\r\n    // Access the 53rd column for the activity label (the label is located in index 52)\r\n    const firstRow = rows[0];\r\n    if (firstRow && firstRow.length > 52) {\r\n      const label = firstRow[52]; // 53rd column (index 52)\r\n\r\n      // Debugging: Check the current activity and corresponding video\r\n      console.log('Current label:', label);\r\n\r\n      if (labelVideoMapping[label]) {\r\n        const videoPath = labelVideoMapping[label].video;\r\n        console.log('Video path:', videoPath); // Debugging: Check if the correct video is selected\r\n\r\n        setActivity(labelVideoMapping[label].name); // Set activity name\r\n        setVideoSrc(videoPath); // Set the video source (dynamically updates)\r\n\r\n      } else {\r\n        setActivity(\"Unknown Activity\");\r\n        setVideoSrc(\"\"); // No video available\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>CSV File Graph Plotter</h1>\r\n      {/* File Upload */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ margin: \"20px\", padding: \"10px\" }}\r\n      />\r\n      \r\n      {/* Split View: Graph and Video */}\r\n      <div style={{ display: \"flex\", justifyContent: \"space-around\", padding: \"20px\" }}>\r\n        {/* Graph Section */}\r\n        <div style={{ width: \"45%\" }}>\r\n          {chartData ? (\r\n            <Line\r\n              data={chartData}\r\n              options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    title: { display: true, text: \"Rows\", font: { size: 14 } },\r\n                    grid: { display: true },\r\n                  },\r\n                  y: {\r\n                    title: { display: true, text: \"Values\", font: { size: 14 } },\r\n                    grid: { display: true },\r\n                    min: 0, // Set minimum Y value to 0\r\n                    max: 20, // Limit Y axis to a maximum value of 20\r\n                    ticks: {\r\n                      stepSize: 2, // Step size to control spacing between ticks (optional)\r\n                      callback: (value) => value.toFixed(2), // Optionally format the y-axis tick labels\r\n                    },\r\n                  },\r\n                },\r\n                plugins: {\r\n                  legend: { display: true, position: \"right\" },\r\n                  tooltip: { mode: \"index\", intersect: false },\r\n                },\r\n              }}\r\n            />\r\n          ) : (\r\n            <p style={{ color: \"#888\" }}>Upload a CSV file to display the graph.</p>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Video Section */}\r\n        <div style={{ width: \"45%\" }}>\r\n          <h2>Current Activity: {activity}</h2>\r\n          {videoSrc ? (\r\n            <video width=\"100%\" height=\"400\" controls>\r\n              <source src={videoSrc} type=\"video/mp4\" />\r\n              Your browser does not support the video tag.\r\n            </video>\r\n          ) : (\r\n            <p>No video available for the current activity.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}