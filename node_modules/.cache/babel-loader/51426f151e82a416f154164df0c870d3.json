{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nconst CsvGraphPlotter = () => {\n  const [data, setData] = useState([]); // Stores parsed CSV data\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\n  const [chartData, setChartData] = useState(null); // Stores data for graph plotting\n\n  // Automatically update the graph every second\n  useEffect(() => {\n    if (data.length > 0) {\n      const interval = setInterval(() => {\n        updateChart(currentIndex);\n        setCurrentIndex(prevIndex => (prevIndex + 50) % data.length); // Loop through all rows\n      }, 1000); // Update every 1 second\n      return () => clearInterval(interval); // Clear interval when component unmounts\n    }\n  }, [data, currentIndex]);\n\n  // Handle CSV file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: result => {\n          const parsedData = result.data.filter(row => row.length === 53); // Validate rows\n          setData(parsedData); // Save parsed data\n          updateChart(0); // Start charting with the first 50 rows\n        },\n        header: false,\n        skipEmptyLines: true\n      });\n    }\n  };\n\n  // Update chart for the current chunk of rows\n  const updateChart = startIndex => {\n    const endIndex = startIndex + 50 > data.length ? data.length : startIndex + 50;\n    const rows = data.slice(startIndex, endIndex); // Get the next chunk of rows\n    const xLabels = rows.map((_, idx) => `Row ${startIndex + idx + 1}`); // Labels for rows (x-axis)\n\n    const datasets = Array.from({\n      length: 52\n    }, (_, colIdx) => ({\n      label: `Column ${colIdx + 1}`,\n      data: rows.map(row => parseFloat(row[colIdx])),\n      // Use column values for y-axis\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`,\n      // Random colors\n      borderWidth: 1,\n      fill: false\n    }));\n    setChartData({\n      labels: xLabels,\n      // Set x-axis labels\n      datasets\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"CSV File Graph Plotter\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".csv\",\n    onChange: handleFileUpload,\n    style: {\n      margin: \"20px\",\n      padding: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), chartData ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"20px auto\",\n      width: \"80%\",\n      height: \"500px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: \"Rows\",\n            font: {\n              size: 14\n            }\n          },\n          grid: {\n            display: true\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: \"Values\",\n            font: {\n              size: 14\n            }\n          },\n          grid: {\n            display: true\n          },\n          ticks: {\n            max: 20,\n            // Set maximum value on the Y-axis to 20\n            min: 0,\n            // Optional: Set minimum value to 0 for better clarity\n            stepSize: 2,\n            // Optional: Control step size between ticks\n            callback: value => value.toFixed(2) // Format Y-axis ticks\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          display: true,\n          position: \"right\"\n        },\n        tooltip: {\n          mode: \"index\",\n          intersect: false\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"#888\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Upload a CSV file to display the graph.\"));\n};\nexport default CsvGraphPlotter;","map":{"version":3,"names":["React","useState","useEffect","Papa","Line","CsvGraphPlotter","data","setData","currentIndex","setCurrentIndex","chartData","setChartData","length","interval","setInterval","updateChart","prevIndex","clearInterval","handleFileUpload","event","file","target","files","parse","complete","result","parsedData","filter","row","header","skipEmptyLines","startIndex","endIndex","rows","slice","xLabels","map","_","idx","datasets","Array","from","colIdx","label","parseFloat","borderColor","Math","random","borderWidth","fill","labels","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","margin","width","height","options","responsive","maintainAspectRatio","scales","x","title","display","text","font","size","grid","y","ticks","max","min","stepSize","callback","value","toFixed","plugins","legend","position","tooltip","mode","intersect","color"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]); // Stores parsed CSV data\r\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\r\n  const [chartData, setChartData] = useState(null); // Stores data for graph plotting\r\n\r\n  // Automatically update the graph every second\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const interval = setInterval(() => {\r\n        updateChart(currentIndex);\r\n        setCurrentIndex((prevIndex) => (prevIndex + 50) % data.length); // Loop through all rows\r\n      }, 1000); // Update every 1 second\r\n      return () => clearInterval(interval); // Clear interval when component unmounts\r\n    }\r\n  }, [data, currentIndex]);\r\n\r\n  // Handle CSV file upload\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (result) => {\r\n          const parsedData = result.data.filter((row) => row.length === 53); // Validate rows\r\n          setData(parsedData); // Save parsed data\r\n          updateChart(0); // Start charting with the first 50 rows\r\n        },\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Update chart for the current chunk of rows\r\n  const updateChart = (startIndex) => {\r\n    const endIndex = startIndex + 50 > data.length ? data.length : startIndex + 50;\r\n    const rows = data.slice(startIndex, endIndex); // Get the next chunk of rows\r\n    const xLabels = rows.map((_, idx) => `Row ${startIndex + idx + 1}`); // Labels for rows (x-axis)\r\n\r\n    const datasets = Array.from({ length: 52 }, (_, colIdx) => ({\r\n      label: `Column ${colIdx + 1}`,\r\n      data: rows.map((row) => parseFloat(row[colIdx])), // Use column values for y-axis\r\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`, // Random colors\r\n      borderWidth: 1,\r\n      fill: false,\r\n    }));\r\n\r\n    setChartData({\r\n      labels: xLabels, // Set x-axis labels\r\n      datasets,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>CSV File Graph Plotter</h1>\r\n      {/* File Upload */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ margin: \"20px\", padding: \"10px\" }}\r\n      />\r\n      {/* Graph */}\r\n      {chartData ? (\r\n        <div style={{ margin: \"20px auto\", width: \"80%\", height: \"500px\" }}>\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: {\r\n                  title: { display: true, text: \"Rows\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                },\r\n                y: {\r\n                  title: { display: true, text: \"Values\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                  ticks: {\r\n                    max: 20, // Set maximum value on the Y-axis to 20\r\n                    min: 0,  // Optional: Set minimum value to 0 for better clarity\r\n                    stepSize: 2, // Optional: Control step size between ticks\r\n                    callback: (value) => value.toFixed(2), // Format Y-axis ticks\r\n                  },\r\n                },\r\n              },\r\n              plugins: {\r\n                legend: { display: true, position: \"right\" },\r\n                tooltip: { mode: \"index\", intersect: false },\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <p style={{ color: \"#888\" }}>Upload a CSV file to display the graph.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,eAAe;AAEtB,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACd,IAAII,IAAI,CAACM,MAAM,GAAG,CAAC,EAAE;MACnB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCC,WAAW,CAACP,YAAY,CAAC;QACzBC,eAAe,CAAEO,SAAS,IAAK,CAACA,SAAS,GAAG,EAAE,IAAIV,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC;MAClE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACV,OAAO,MAAMK,aAAa,CAACJ,QAAQ,CAAC,CAAC,CAAC;IACxC;EACF,CAAC,EAAE,CAACP,IAAI,EAAEE,YAAY,CAAC,CAAC;;EAExB;EACA,MAAMU,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,EAAE;MACRjB,IAAI,CAACoB,KAAK,CAACH,IAAI,EAAE;QACfI,QAAQ,EAAGC,MAAM,IAAK;UACpB,MAAMC,UAAU,GAAGD,MAAM,CAACnB,IAAI,CAACqB,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAAChB,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC;UACnEL,OAAO,CAACmB,UAAU,CAAC,CAAC,CAAC;UACrBX,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;QACDc,MAAM,EAAE,KAAK;QACbC,cAAc,EAAE;MAClB,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMf,WAAW,GAAIgB,UAAU,IAAK;IAClC,MAAMC,QAAQ,GAAGD,UAAU,GAAG,EAAE,GAAGzB,IAAI,CAACM,MAAM,GAAGN,IAAI,CAACM,MAAM,GAAGmB,UAAU,GAAG,EAAE;IAC9E,MAAME,IAAI,GAAG3B,IAAI,CAAC4B,KAAK,CAACH,UAAU,EAAEC,QAAQ,CAAC,CAAC,CAAC;IAC/C,MAAMG,OAAO,GAAGF,IAAI,CAACG,GAAG,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAK,OAAOP,UAAU,GAAGO,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;;IAErE,MAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAE7B,MAAM,EAAE;IAAG,CAAC,EAAE,CAACyB,CAAC,EAAEK,MAAM,MAAM;MAC1DC,KAAK,EAAE,UAAUD,MAAM,GAAG,CAAC,EAAE;MAC7BpC,IAAI,EAAE2B,IAAI,CAACG,GAAG,CAAER,GAAG,IAAKgB,UAAU,CAAChB,GAAG,CAACc,MAAM,CAAC,CAAC,CAAC;MAAE;MAClDG,WAAW,EAAE,QAAQC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,KAAKD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,KAAKD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,QAAQ;MAAE;MAClGC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE;IACR,CAAC,CAAC,CAAC;IAEHtC,YAAY,CAAC;MACXuC,MAAM,EAAEf,OAAO;MAAE;MACjBI;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACEvC,KAAA,CAAAmD,aAAA;IAAKC,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnD5D,KAAA,CAAAmD,aAAA;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,wBAA0B,CAAC,eAE/B5D,KAAA,CAAAmD,aAAA;IACEU,IAAI,EAAC,MAAM;IACXC,MAAM,EAAC,MAAM;IACbC,QAAQ,EAAE7C,gBAAiB;IAC3BkC,KAAK,EAAE;MAAEY,MAAM,EAAE,MAAM;MAAEV,OAAO,EAAE;IAAO,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC5C,CAAC,EAEDlD,SAAS,gBACRV,KAAA,CAAAmD,aAAA;IAAKC,KAAK,EAAE;MAAEY,MAAM,EAAE,WAAW;MAAEC,KAAK,EAAE,KAAK;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjE5D,KAAA,CAAAmD,aAAA,CAAC/C,IAAI;IACHE,IAAI,EAAEI,SAAU;IAChByD,OAAO,EAAE;MACPC,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,KAAK,EAAE;YAAEC,OAAO,EAAE,IAAI;YAAEC,IAAI,EAAE,MAAM;YAAEC,IAAI,EAAE;cAAEC,IAAI,EAAE;YAAG;UAAE,CAAC;UAC1DC,IAAI,EAAE;YAAEJ,OAAO,EAAE;UAAK;QACxB,CAAC;QACDK,CAAC,EAAE;UACDN,KAAK,EAAE;YAAEC,OAAO,EAAE,IAAI;YAAEC,IAAI,EAAE,QAAQ;YAAEC,IAAI,EAAE;cAAEC,IAAI,EAAE;YAAG;UAAE,CAAC;UAC5DC,IAAI,EAAE;YAAEJ,OAAO,EAAE;UAAK,CAAC;UACvBM,KAAK,EAAE;YACLC,GAAG,EAAE,EAAE;YAAE;YACTC,GAAG,EAAE,CAAC;YAAG;YACTC,QAAQ,EAAE,CAAC;YAAE;YACbC,QAAQ,EAAGC,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAE;UACzC;QACF;MACF,CAAC;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UAAEd,OAAO,EAAE,IAAI;UAAEe,QAAQ,EAAE;QAAQ,CAAC;QAC5CC,OAAO,EAAE;UAAEC,IAAI,EAAE,OAAO;UAAEC,SAAS,EAAE;QAAM;MAC7C;IACF,CAAE;IAAApC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CACE,CAAC,gBAEN5D,KAAA,CAAAmD,aAAA;IAAGC,KAAK,EAAE;MAAEwC,KAAK,EAAE;IAAO,CAAE;IAAArC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,yCAA0C,CAEtE,CAAC;AAEV,CAAC;AAED,eAAevD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}