{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nconst WINDOW_SIZE = 50; // Points visible at once\nconst UPDATE_INTERVAL = 100; // Update interval in ms\nconst GRAPH_HEIGHT = 400;\nconst GRAPH_WIDTH = 600;\nconst videoMapping = {\n  0: {\n    name: \"Sit\",\n    path: \"/videos/sit.mp4\"\n  },\n  1: {\n    name: \"Forward Bend\",\n    path: \"/videos/forward_bend.mp4\"\n  },\n  2: {\n    name: \"Warrior Pose\",\n    path: \"/videos/warrior.mp4\"\n  },\n  3: {\n    name: \"Triangle Pose\",\n    path: \"/videos/triangle.mp4\"\n  },\n  4: {\n    name: \"Vajrasana\",\n    path: \"/videos/vajrasan.mp4\"\n  },\n  5: {\n    name: \"Backward Bend\",\n    path: \"/videos/backwardbend_pose.mp4\"\n  }\n};\nconst CsvGraphPlotter = () => {\n  const [data, setData] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [visibleData, setVisibleData] = useState([]);\n  const [currentActivity, setCurrentActivity] = useState(\"Unknown Activity\");\n  const [videoSrc, setVideoSrc] = useState(\"\");\n\n  // Generate line colors\n  const lineColors = Array.from({\n    length: 52\n  }, (_, i) => `hsl(${i * 7 % 360}, 70%, 50%)`);\n  const parseCSV = content => {\n    const lines = content.split('\\n');\n    return lines.map(line => {\n      const values = line.split(',');\n      if (values.length === 53) {\n        return {\n          values: values.slice(0, 52).map(v => parseFloat(v) || 0),\n          activity: parseInt(values[52], 10)\n        };\n      }\n      return null;\n    }).filter(Boolean);\n  };\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const parsedData = parseCSV(e.target.result);\n        setData(parsedData);\n        setCurrentIndex(0);\n        setVisibleData(parsedData.slice(0, WINDOW_SIZE));\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  // Create SVG paths for each data series\n  const createPath = (dataPoints, columnIndex) => {\n    if (!dataPoints.length) return '';\n    const xStep = GRAPH_WIDTH / (WINDOW_SIZE - 1);\n    const yScale = GRAPH_HEIGHT / 20; // Scale for 0-20 range\n\n    return dataPoints.map((point, i) => {\n      const x = i * xStep;\n      const y = GRAPH_HEIGHT - point.values[columnIndex] * yScale;\n      return `${i === 0 ? 'M' : 'L'} ${x} ${y}`;\n    }).join(' ');\n  };\n  const updateChartAndVideo = useCallback(() => {\n    if (data.length === 0) return;\n    const endIndex = currentIndex + WINDOW_SIZE;\n    const newVisibleData = data.slice(Math.max(0, currentIndex), Math.min(endIndex, data.length));\n    if (newVisibleData.length > 0) {\n      const currentRow = data[currentIndex];\n      const label = currentRow.activity;\n      if (videoMapping[label]) {\n        setCurrentActivity(videoMapping[label].name);\n        setVideoSrc(videoMapping[label].path);\n      } else {\n        setCurrentActivity(\"Unknown Activity\");\n        setVideoSrc(\"\");\n      }\n    }\n    setVisibleData(newVisibleData);\n  }, [data, currentIndex]);\n  useEffect(() => {\n    if (data.length === 0) return;\n    const interval = setInterval(() => {\n      setCurrentIndex(prevIndex => {\n        const nextIndex = prevIndex + 1;\n        return nextIndex >= data.length ? 0 : nextIndex;\n      });\n    }, UPDATE_INTERVAL);\n    return () => clearInterval(interval);\n  }, [data]);\n  useEffect(() => {\n    updateChartAndVideo();\n  }, [currentIndex, updateChartAndVideo]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-5 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-2xl font-bold mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"Real-time CSV Graph Plotter\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".csv\",\n    onChange: handleFileUpload,\n    className: \"mb-6 p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex justify-around items-start gap-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-1/2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    width: GRAPH_WIDTH,\n    height: GRAPH_HEIGHT,\n    className: \"bg-white border border-gray-300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, Array.from({\n    length: 11\n  }, (_, i) => /*#__PURE__*/React.createElement(\"line\", {\n    key: `grid-${i}`,\n    x1: \"0\",\n    y1: i * (GRAPH_HEIGHT / 10),\n    x2: GRAPH_WIDTH,\n    y2: i * (GRAPH_HEIGHT / 10),\n    stroke: \"#eee\",\n    strokeWidth: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  })), Array.from({\n    length: 52\n  }, (_, i) => /*#__PURE__*/React.createElement(\"path\", {\n    key: `line-${i}`,\n    d: createPath(visibleData, i),\n    stroke: lineColors[i],\n    fill: \"none\",\n    strokeWidth: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-1/2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-xl font-semibold mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, \"Current Activity: \", currentActivity), videoSrc ? /*#__PURE__*/React.createElement(\"video\", {\n    key: videoSrc,\n    className: \"w-full h-[400px] object-contain pointer-events-none\",\n    loop: true,\n    autoPlay: true,\n    muted: true,\n    controls: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"source\", {\n    src: videoSrc,\n    type: \"video/mp4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }), \"Your browser does not support the video tag.\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, \"No video available for the current activity.\"))));\n};\nexport default CsvGraphPlotter;","map":{"version":3,"names":["React","useState","useEffect","useCallback","WINDOW_SIZE","UPDATE_INTERVAL","GRAPH_HEIGHT","GRAPH_WIDTH","videoMapping","name","path","CsvGraphPlotter","data","setData","currentIndex","setCurrentIndex","visibleData","setVisibleData","currentActivity","setCurrentActivity","videoSrc","setVideoSrc","lineColors","Array","from","length","_","i","parseCSV","content","lines","split","map","line","values","slice","v","parseFloat","activity","parseInt","filter","Boolean","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","parsedData","result","readAsText","createPath","dataPoints","columnIndex","xStep","yScale","point","x","y","join","updateChartAndVideo","endIndex","newVisibleData","Math","max","min","currentRow","label","interval","setInterval","prevIndex","nextIndex","clearInterval","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","width","height","key","x1","y1","x2","y2","stroke","strokeWidth","d","fill","loop","autoPlay","muted","controls","src"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nconst WINDOW_SIZE = 50; // Points visible at once\r\nconst UPDATE_INTERVAL = 100; // Update interval in ms\r\nconst GRAPH_HEIGHT = 400;\r\nconst GRAPH_WIDTH = 600;\r\n\r\nconst videoMapping = {\r\n  0: { name: \"Sit\", path: \"/videos/sit.mp4\" },\r\n  1: { name: \"Forward Bend\", path: \"/videos/forward_bend.mp4\" },\r\n  2: { name: \"Warrior Pose\", path: \"/videos/warrior.mp4\" },\r\n  3: { name: \"Triangle Pose\", path: \"/videos/triangle.mp4\" },\r\n  4: { name: \"Vajrasana\", path: \"/videos/vajrasan.mp4\" },\r\n  5: { name: \"Backward Bend\", path: \"/videos/backwardbend_pose.mp4\" },\r\n};\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [visibleData, setVisibleData] = useState([]);\r\n  const [currentActivity, setCurrentActivity] = useState(\"Unknown Activity\");\r\n  const [videoSrc, setVideoSrc] = useState(\"\");\r\n\r\n  // Generate line colors\r\n  const lineColors = Array.from({ length: 52 }, (_, i) => \r\n    `hsl(${(i * 7) % 360}, 70%, 50%)`\r\n  );\r\n\r\n  const parseCSV = (content) => {\r\n    const lines = content.split('\\n');\r\n    return lines.map(line => {\r\n      const values = line.split(',');\r\n      if (values.length === 53) {\r\n        return {\r\n          values: values.slice(0, 52).map(v => parseFloat(v) || 0),\r\n          activity: parseInt(values[52], 10)\r\n        };\r\n      }\r\n      return null;\r\n    }).filter(Boolean);\r\n  };\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const parsedData = parseCSV(e.target.result);\r\n        setData(parsedData);\r\n        setCurrentIndex(0);\r\n        setVisibleData(parsedData.slice(0, WINDOW_SIZE));\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  };\r\n\r\n  // Create SVG paths for each data series\r\n  const createPath = (dataPoints, columnIndex) => {\r\n    if (!dataPoints.length) return '';\r\n    \r\n    const xStep = GRAPH_WIDTH / (WINDOW_SIZE - 1);\r\n    const yScale = GRAPH_HEIGHT / 20; // Scale for 0-20 range\r\n\r\n    return dataPoints.map((point, i) => {\r\n      const x = i * xStep;\r\n      const y = GRAPH_HEIGHT - (point.values[columnIndex] * yScale);\r\n      return `${i === 0 ? 'M' : 'L'} ${x} ${y}`;\r\n    }).join(' ');\r\n  };\r\n\r\n  const updateChartAndVideo = useCallback(() => {\r\n    if (data.length === 0) return;\r\n\r\n    const endIndex = currentIndex + WINDOW_SIZE;\r\n    const newVisibleData = data.slice(\r\n      Math.max(0, currentIndex),\r\n      Math.min(endIndex, data.length)\r\n    );\r\n\r\n    if (newVisibleData.length > 0) {\r\n      const currentRow = data[currentIndex];\r\n      const label = currentRow.activity;\r\n      \r\n      if (videoMapping[label]) {\r\n        setCurrentActivity(videoMapping[label].name);\r\n        setVideoSrc(videoMapping[label].path);\r\n      } else {\r\n        setCurrentActivity(\"Unknown Activity\");\r\n        setVideoSrc(\"\");\r\n      }\r\n    }\r\n\r\n    setVisibleData(newVisibleData);\r\n  }, [data, currentIndex]);\r\n\r\n  useEffect(() => {\r\n    if (data.length === 0) return;\r\n\r\n    const interval = setInterval(() => {\r\n      setCurrentIndex(prevIndex => {\r\n        const nextIndex = prevIndex + 1;\r\n        return nextIndex >= data.length ? 0 : nextIndex;\r\n      });\r\n    }, UPDATE_INTERVAL);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    updateChartAndVideo();\r\n  }, [currentIndex, updateChartAndVideo]);\r\n\r\n  return (\r\n    <div className=\"p-5 text-center\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Real-time CSV Graph Plotter</h1>\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        className=\"mb-6 p-2\"\r\n      />\r\n\r\n      <div className=\"flex justify-around items-start gap-4\">\r\n        <div className=\"w-1/2\">\r\n          <svg\r\n            width={GRAPH_WIDTH}\r\n            height={GRAPH_HEIGHT}\r\n            className=\"bg-white border border-gray-300\"\r\n          >\r\n            {/* Grid lines */}\r\n            {Array.from({ length: 11 }, (_, i) => (\r\n              <line\r\n                key={`grid-${i}`}\r\n                x1=\"0\"\r\n                y1={i * (GRAPH_HEIGHT / 10)}\r\n                x2={GRAPH_WIDTH}\r\n                y2={i * (GRAPH_HEIGHT / 10)}\r\n                stroke=\"#eee\"\r\n                strokeWidth=\"1\"\r\n              />\r\n            ))}\r\n            \r\n            {/* Data lines */}\r\n            {Array.from({ length: 52 }, (_, i) => (\r\n              <path\r\n                key={`line-${i}`}\r\n                d={createPath(visibleData, i)}\r\n                stroke={lineColors[i]}\r\n                fill=\"none\"\r\n                strokeWidth=\"1\"\r\n              />\r\n            ))}\r\n          </svg>\r\n        </div>\r\n\r\n        <div className=\"w-1/2\">\r\n          <h2 className=\"text-xl font-semibold mb-4\">Current Activity: {currentActivity}</h2>\r\n          {videoSrc ? (\r\n            <video\r\n              key={videoSrc}\r\n              className=\"w-full h-[400px] object-contain pointer-events-none\"\r\n              loop\r\n              autoPlay\r\n              muted\r\n              controls={false}\r\n            >\r\n              <source src={videoSrc} type=\"video/mp4\" />\r\n              Your browser does not support the video tag.\r\n            </video>\r\n          ) : (\r\n            <p>No video available for the current activity.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}