{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\n\n// Video Mapping\nconst videoMapping = {\n  0: {\n    name: \"Sit\",\n    path: \"/videos/sit.mp4\"\n  },\n  1: {\n    name: \"Forward Bend\",\n    path: \"/videos/forward_bend.mp4\"\n  },\n  2: {\n    name: \"Warrior Pose\",\n    path: \"/videos/warrior.mp4\"\n  },\n  3: {\n    name: \"Triangle Pose\",\n    path: \"/videos/triangle.mp4\"\n  },\n  4: {\n    name: \"Vajrasana\",\n    path: \"/videos/vajrasan.mp4\"\n  },\n  5: {\n    name: \"Backward Bend\",\n    path: \"/videos/backwardbend_pose.mp4\"\n  }\n};\nconst CsvGraphPlotter = () => {\n  const [data, setData] = useState([]); // Parsed CSV data\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\n  const [chartData, setChartData] = useState(null); // Graph data\n  const [currentActivity, setCurrentActivity] = useState(\"Unknown Activity\"); // Current activity label\n  const [videoSrc, setVideoSrc] = useState(\"\"); // Current video source\n\n  const chartRef = useRef(null); // Ref for chart instance\n\n  // Update video and graph incrementally like a sorting visualizer\n  const updateChartAndVideo = useCallback(startIndex => {\n    const row = data[startIndex]; // Get the next row\n    const xLabels = [`t ${startIndex + 1}`]; // X-axis label based on the row\n\n    // Create datasets for the graph\n    const datasets = Array.from({\n      length: 52\n    }, (_, colIdx) => ({\n      label: `Column ${colIdx + 1}`,\n      data: [parseFloat(row[colIdx])],\n      // Take only one data point per update\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`,\n      borderWidth: 1,\n      fill: false\n    }));\n    setChartData(prevChartData => ({\n      ...prevChartData,\n      labels: [...((prevChartData === null || prevChartData === void 0 ? void 0 : prevChartData.labels) || []), ...xLabels],\n      // Append X labels\n      datasets: prevChartData ? prevChartData.datasets.map((dataset, i) => ({\n        ...dataset,\n        data: [...dataset.data, datasets[i].data[0]] // Incrementally append each data point\n      })) : datasets // Initialize dataset when first created\n    }));\n\n    // Handle video update based on the label\n    const label = parseInt(row[52], 10); // Get the label from the last column\n    if (videoMapping[label]) {\n      setCurrentActivity(videoMapping[label].name);\n      setVideoSrc(videoMapping[label].path);\n    } else {\n      setCurrentActivity(\"Unknown Activity\");\n      setVideoSrc(\"\");\n    }\n\n    // Ensure proper update of the chart from the ref\n    if (chartRef.current) {\n      chartRef.current.chart.update(); // Ensure the chart updates visually after each row\n    }\n  }, [data]); // data is a dependency, since it is used in this function\n\n  // Update video and graph for the current chunk of rows\n  useEffect(() => {\n    if (data.length > 0) {\n      const interval = setInterval(() => {\n        updateChartAndVideo(currentIndex); // Update function is now stable due to useCallback\n        setCurrentIndex(prevIndex => (prevIndex + 1) % data.length); // Loop through rows\n      }, 50); // Speed of update (50ms = smooth visual transitions)\n\n      return () => clearInterval(interval); // Cleanup on unmount\n    }\n  }, [data, currentIndex, updateChartAndVideo]); // Ensure useEffect knows about changes to the function\n\n  // File upload handler\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: result => {\n          const parsedData = result.data.filter(row => row.length === 53); // Ensure rows with exactly 53 columns\n          setData(parsedData);\n          updateChartAndVideo(0); // Initialize chart and video\n        },\n        header: false,\n        skipEmptyLines: true\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, \"CSV File Graph Plotter\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \".csv\",\n    onChange: handleFileUpload,\n    style: {\n      margin: \"20px\",\n      padding: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-around\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"45%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, chartData ? /*#__PURE__*/React.createElement(Line, {\n    ref: chartRef // Get the chart reference\n    ,\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          title: {\n            display: true,\n            text: \"Time\",\n            font: {\n              size: 14\n            }\n          },\n          grid: {\n            display: true\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: \"Values\",\n            font: {\n              size: 14\n            }\n          },\n          grid: {\n            display: true\n          },\n          min: 0,\n          // Set minimum Y value to 0\n          max: 20,\n          // Limit Y axis to a maximum value of 20\n          ticks: {\n            stepSize: 2,\n            // Step size to control spacing between ticks (optional)\n            callback: value => value.toFixed(2) // Optionally format the y-axis tick labels\n          }\n        }\n      },\n      animation: {\n        duration: 0 // No animation on initial load\n      },\n      plugins: {\n        legend: {\n          display: false\n        },\n        tooltip: {\n          mode: \"index\",\n          intersect: false\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"#888\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, \"Upload a CSV file to display the graph.\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"45%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, \"Current Activity: \", currentActivity), videoSrc ? /*#__PURE__*/React.createElement(\"video\", {\n    key: videoSrc // Force React to remount the video element when videoSrc changes\n    ,\n    width: \"100%\",\n    height: \"400\",\n    loop: true,\n    autoPlay: true,\n    muted: true,\n    controls: false,\n    style: {\n      objectFit: \"contain\",\n      pointerEvents: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"source\", {\n    src: videoSrc,\n    type: \"video/mp4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }), \"Your browser does not support the video tag.\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, \"No video available for the current activity.\"))));\n};\nexport default CsvGraphPlotter;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Papa","Line","videoMapping","name","path","CsvGraphPlotter","data","setData","currentIndex","setCurrentIndex","chartData","setChartData","currentActivity","setCurrentActivity","videoSrc","setVideoSrc","chartRef","updateChartAndVideo","startIndex","row","xLabels","datasets","Array","from","length","_","colIdx","label","parseFloat","borderColor","Math","random","borderWidth","fill","prevChartData","labels","map","dataset","i","parseInt","current","chart","update","interval","setInterval","prevIndex","clearInterval","handleFileUpload","event","file","target","files","parse","complete","result","parsedData","filter","header","skipEmptyLines","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","margin","display","justifyContent","width","ref","options","responsive","maintainAspectRatio","scales","x","title","text","font","size","grid","y","min","max","ticks","stepSize","callback","value","toFixed","animation","duration","plugins","legend","tooltip","mode","intersect","color","key","height","loop","autoPlay","muted","controls","objectFit","pointerEvents","src"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\n\r\n// Video Mapping\r\nconst videoMapping = {\r\n  0: { name: \"Sit\", path: \"/videos/sit.mp4\" },\r\n  1: { name: \"Forward Bend\", path: \"/videos/forward_bend.mp4\" },\r\n  2: { name: \"Warrior Pose\", path: \"/videos/warrior.mp4\" },\r\n  3: { name: \"Triangle Pose\", path: \"/videos/triangle.mp4\" },\r\n  4: { name: \"Vajrasana\", path: \"/videos/vajrasan.mp4\" },\r\n  5: { name: \"Backward Bend\", path: \"/videos/backwardbend_pose.mp4\" },\r\n};\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]); // Parsed CSV data\r\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current starting row\r\n  const [chartData, setChartData] = useState(null); // Graph data\r\n  const [currentActivity, setCurrentActivity] = useState(\"Unknown Activity\"); // Current activity label\r\n  const [videoSrc, setVideoSrc] = useState(\"\"); // Current video source\r\n\r\n  const chartRef = useRef(null); // Ref for chart instance\r\n\r\n  // Update video and graph incrementally like a sorting visualizer\r\n  const updateChartAndVideo = useCallback((startIndex) => {\r\n    const row = data[startIndex]; // Get the next row\r\n    const xLabels = [`t ${startIndex + 1}`]; // X-axis label based on the row\r\n\r\n    // Create datasets for the graph\r\n    const datasets = Array.from({ length: 52 }, (_, colIdx) => ({\r\n      label: `Column ${colIdx + 1}`,\r\n      data: [parseFloat(row[colIdx])], // Take only one data point per update\r\n      borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.6)`,\r\n      borderWidth: 1,\r\n      fill: false,\r\n    }));\r\n\r\n    setChartData((prevChartData) => ({\r\n      ...prevChartData,\r\n      labels: [...prevChartData?.labels || [], ...xLabels], // Append X labels\r\n      datasets: prevChartData\r\n        ? prevChartData.datasets.map((dataset, i) => ({\r\n            ...dataset,\r\n            data: [...dataset.data, datasets[i].data[0]], // Incrementally append each data point\r\n          }))\r\n        : datasets, // Initialize dataset when first created\r\n    }));\r\n\r\n    // Handle video update based on the label\r\n    const label = parseInt(row[52], 10); // Get the label from the last column\r\n    if (videoMapping[label]) {\r\n      setCurrentActivity(videoMapping[label].name);\r\n      setVideoSrc(videoMapping[label].path);\r\n    } else {\r\n      setCurrentActivity(\"Unknown Activity\");\r\n      setVideoSrc(\"\");\r\n    }\r\n\r\n    // Ensure proper update of the chart from the ref\r\n    if (chartRef.current) {\r\n      chartRef.current.chart.update(); // Ensure the chart updates visually after each row\r\n    }\r\n  }, [data]); // data is a dependency, since it is used in this function\r\n\r\n  // Update video and graph for the current chunk of rows\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const interval = setInterval(() => {\r\n        updateChartAndVideo(currentIndex); // Update function is now stable due to useCallback\r\n        setCurrentIndex((prevIndex) => (prevIndex + 1) % data.length); // Loop through rows\r\n      }, 50); // Speed of update (50ms = smooth visual transitions)\r\n\r\n      return () => clearInterval(interval); // Cleanup on unmount\r\n    }\r\n  }, [data, currentIndex, updateChartAndVideo]); // Ensure useEffect knows about changes to the function\r\n\r\n  // File upload handler\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (result) => {\r\n          const parsedData = result.data.filter((row) => row.length === 53); // Ensure rows with exactly 53 columns\r\n          setData(parsedData);\r\n          updateChartAndVideo(0); // Initialize chart and video\r\n        },\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>CSV File Graph Plotter</h1>\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ margin: \"20px\", padding: \"10px\" }}\r\n      />\r\n\r\n      <div style={{ display: \"flex\", justifyContent: \"space-around\", padding: \"20px\" }}>\r\n        {/* Graph Section */}\r\n        <div style={{ width: \"45%\" }}>\r\n          {chartData ? (\r\n            <Line\r\n              ref={chartRef} // Get the chart reference\r\n              data={chartData}\r\n              options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                  x: {\r\n                    title: { display: true, text: \"Time\", font: { size: 14 } },\r\n                    grid: { display: true },\r\n                  },\r\n                  y: {\r\n                    title: { display: true, text: \"Values\", font: { size: 14 } },\r\n                    grid: { display: true },\r\n                    min: 0, // Set minimum Y value to 0\r\n                    max: 20, // Limit Y axis to a maximum value of 20\r\n                    ticks: {\r\n                      stepSize: 2, // Step size to control spacing between ticks (optional)\r\n                      callback: (value) => value.toFixed(2), // Optionally format the y-axis tick labels\r\n                    },\r\n                  },\r\n                },\r\n                animation: {\r\n                  duration: 0, // No animation on initial load\r\n                },\r\n                plugins: {\r\n                  legend: { display: false },\r\n                  tooltip: { mode: \"index\", intersect: false },\r\n                },\r\n              }}\r\n            />\r\n          ) : (\r\n            <p style={{ color: \"#888\" }}>Upload a CSV file to display the graph.</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Video Section */}\r\n        <div style={{ width: \"45%\" }}>\r\n          <h1>Current Activity: {currentActivity}</h1>\r\n          {videoSrc ? (\r\n            <video\r\n              key={videoSrc} // Force React to remount the video element when videoSrc changes\r\n              width=\"100%\"\r\n              height=\"400\"\r\n              loop\r\n              autoPlay\r\n              muted\r\n              controls={false}\r\n              style={{\r\n                objectFit: \"contain\",\r\n                pointerEvents: \"none\",\r\n              }}\r\n            >\r\n              <source src={videoSrc} type=\"video/mp4\" />\r\n              Your browser does not support the video tag.\r\n            </video>\r\n          ) : (\r\n            <p>No video available for the current activity.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAO,eAAe;;AAEtB;AACA,MAAMC,YAAY,GAAG;EACnB,CAAC,EAAE;IAAEC,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAkB,CAAC;EAC3C,CAAC,EAAE;IAAED,IAAI,EAAE,cAAc;IAAEC,IAAI,EAAE;EAA2B,CAAC;EAC7D,CAAC,EAAE;IAAED,IAAI,EAAE,cAAc;IAAEC,IAAI,EAAE;EAAsB,CAAC;EACxD,CAAC,EAAE;IAAED,IAAI,EAAE,eAAe;IAAEC,IAAI,EAAE;EAAuB,CAAC;EAC1D,CAAC,EAAE;IAAED,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;EAAuB,CAAC;EACtD,CAAC,EAAE;IAAED,IAAI,EAAE,eAAe;IAAEC,IAAI,EAAE;EAAgC;AACpE,CAAC;AAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACgB,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;EAC5E,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9C,MAAMoB,QAAQ,GAAGlB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE/B;EACA,MAAMmB,mBAAmB,GAAGlB,WAAW,CAAEmB,UAAU,IAAK;IACtD,MAAMC,GAAG,GAAGb,IAAI,CAACY,UAAU,CAAC,CAAC,CAAC;IAC9B,MAAME,OAAO,GAAG,CAAC,KAAKF,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEzC;IACA,MAAMG,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,MAAM,MAAM;MAC1DC,KAAK,EAAE,UAAUD,MAAM,GAAG,CAAC,EAAE;MAC7BpB,IAAI,EAAE,CAACsB,UAAU,CAACT,GAAG,CAACO,MAAM,CAAC,CAAC,CAAC;MAAE;MACjCG,WAAW,EAAE,QAAQC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,KAAKD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,KAAKD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,QAAQ;MAChGC,WAAW,EAAE,CAAC;MACdC,IAAI,EAAE;IACR,CAAC,CAAC,CAAC;IAEHtB,YAAY,CAAEuB,aAAa,KAAM;MAC/B,GAAGA,aAAa;MAChBC,MAAM,EAAE,CAAC,IAAG,CAAAD,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEC,MAAM,KAAI,EAAE,GAAE,GAAGf,OAAO,CAAC;MAAE;MACtDC,QAAQ,EAAEa,aAAa,GACnBA,aAAa,CAACb,QAAQ,CAACe,GAAG,CAAC,CAACC,OAAO,EAAEC,CAAC,MAAM;QAC1C,GAAGD,OAAO;QACV/B,IAAI,EAAE,CAAC,GAAG+B,OAAO,CAAC/B,IAAI,EAAEe,QAAQ,CAACiB,CAAC,CAAC,CAAChC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE;MAChD,CAAC,CAAC,CAAC,GACHe,QAAQ,CAAE;IAChB,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMM,KAAK,GAAGY,QAAQ,CAACpB,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACrC,IAAIjB,YAAY,CAACyB,KAAK,CAAC,EAAE;MACvBd,kBAAkB,CAACX,YAAY,CAACyB,KAAK,CAAC,CAACxB,IAAI,CAAC;MAC5CY,WAAW,CAACb,YAAY,CAACyB,KAAK,CAAC,CAACvB,IAAI,CAAC;IACvC,CAAC,MAAM;MACLS,kBAAkB,CAAC,kBAAkB,CAAC;MACtCE,WAAW,CAAC,EAAE,CAAC;IACjB;;IAEA;IACA,IAAIC,QAAQ,CAACwB,OAAO,EAAE;MACpBxB,QAAQ,CAACwB,OAAO,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IACnC;EACF,CAAC,EAAE,CAACpC,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ;EACAT,SAAS,CAAC,MAAM;IACd,IAAIS,IAAI,CAACkB,MAAM,GAAG,CAAC,EAAE;MACnB,MAAMmB,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC3B,mBAAmB,CAACT,YAAY,CAAC,CAAC,CAAC;QACnCC,eAAe,CAAEoC,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,IAAIvC,IAAI,CAACkB,MAAM,CAAC,CAAC,CAAC;MACjE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;MAER,OAAO,MAAMsB,aAAa,CAACH,QAAQ,CAAC,CAAC,CAAC;IACxC;EACF,CAAC,EAAE,CAACrC,IAAI,EAAEE,YAAY,EAAES,mBAAmB,CAAC,CAAC,CAAC,CAAC;;EAE/C;EACA,MAAM8B,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,EAAE;MACRjD,IAAI,CAACoD,KAAK,CAACH,IAAI,EAAE;QACfI,QAAQ,EAAGC,MAAM,IAAK;UACpB,MAAMC,UAAU,GAAGD,MAAM,CAAChD,IAAI,CAACkD,MAAM,CAAErC,GAAG,IAAKA,GAAG,CAACK,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC;UACnEjB,OAAO,CAACgD,UAAU,CAAC;UACnBtC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC;QACDwC,MAAM,EAAE,KAAK;QACbC,cAAc,EAAE;MAClB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACE/D,KAAA,CAAAgE,aAAA;IAAKC,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACnDzE,KAAA,CAAAgE,aAAA;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,wBAA0B,CAAC,eAC/BzE,KAAA,CAAAgE,aAAA;IACEU,IAAI,EAAC,MAAM;IACXC,MAAM,EAAC,MAAM;IACbC,QAAQ,EAAExB,gBAAiB;IAC3Ba,KAAK,EAAE;MAAEY,MAAM,EAAE,MAAM;MAAEV,OAAO,EAAE;IAAO,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC5C,CAAC,eAEFzE,KAAA,CAAAgE,aAAA;IAAKC,KAAK,EAAE;MAAEa,OAAO,EAAE,MAAM;MAAEC,cAAc,EAAE,cAAc;MAAEZ,OAAO,EAAE;IAAO,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAE/EzE,KAAA,CAAAgE,aAAA;IAAKC,KAAK,EAAE;MAAEe,KAAK,EAAE;IAAM,CAAE;IAAAZ,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC1B1D,SAAS,gBACRf,KAAA,CAAAgE,aAAA,CAAC1D,IAAI;IACH2E,GAAG,EAAE5D,QAAS,CAAC;IAAA;IACfV,IAAI,EAAEI,SAAU;IAChBmE,OAAO,EAAE;MACPC,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,KAAK,EAAE;YAAET,OAAO,EAAE,IAAI;YAAEU,IAAI,EAAE,MAAM;YAAEC,IAAI,EAAE;cAAEC,IAAI,EAAE;YAAG;UAAE,CAAC;UAC1DC,IAAI,EAAE;YAAEb,OAAO,EAAE;UAAK;QACxB,CAAC;QACDc,CAAC,EAAE;UACDL,KAAK,EAAE;YAAET,OAAO,EAAE,IAAI;YAAEU,IAAI,EAAE,QAAQ;YAAEC,IAAI,EAAE;cAAEC,IAAI,EAAE;YAAG;UAAE,CAAC;UAC5DC,IAAI,EAAE;YAAEb,OAAO,EAAE;UAAK,CAAC;UACvBe,GAAG,EAAE,CAAC;UAAE;UACRC,GAAG,EAAE,EAAE;UAAE;UACTC,KAAK,EAAE;YACLC,QAAQ,EAAE,CAAC;YAAE;YACbC,QAAQ,EAAGC,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAE;UACzC;QACF;MACF,CAAC;MACDC,SAAS,EAAE;QACTC,QAAQ,EAAE,CAAC,CAAE;MACf,CAAC;MACDC,OAAO,EAAE;QACPC,MAAM,EAAE;UAAEzB,OAAO,EAAE;QAAM,CAAC;QAC1B0B,OAAO,EAAE;UAAEC,IAAI,EAAE,OAAO;UAAEC,SAAS,EAAE;QAAM;MAC7C;IACF,CAAE;IAAAtC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CAAC,gBAEFzE,KAAA,CAAAgE,aAAA;IAAGC,KAAK,EAAE;MAAE0C,KAAK,EAAE;IAAO,CAAE;IAAAvC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,yCAA0C,CAEtE,CAAC,eAGNzE,KAAA,CAAAgE,aAAA;IAAKC,KAAK,EAAE;MAAEe,KAAK,EAAE;IAAM,CAAE;IAAAZ,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC3BzE,KAAA,CAAAgE,aAAA;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,oBAAkB,EAACxD,eAAoB,CAAC,EAC3CE,QAAQ,gBACPnB,KAAA,CAAAgE,aAAA;IACE4C,GAAG,EAAEzF,QAAS,CAAC;IAAA;IACf6D,KAAK,EAAC,MAAM;IACZ6B,MAAM,EAAC,KAAK;IACZC,IAAI;IACJC,QAAQ;IACRC,KAAK;IACLC,QAAQ,EAAE,KAAM;IAChBhD,KAAK,EAAE;MACLiD,SAAS,EAAE,SAAS;MACpBC,aAAa,EAAE;IACjB,CAAE;IAAA/C,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAEFzE,KAAA,CAAAgE,aAAA;IAAQoD,GAAG,EAAEjG,QAAS;IAACuD,IAAI,EAAC,WAAW;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,gDAErC,CAAC,gBAERzE,KAAA,CAAAgE,aAAA;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,8CAA+C,CAEjD,CACF,CACF,CAAC;AAEV,CAAC;AAED,eAAe/D,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}