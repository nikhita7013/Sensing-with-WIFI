{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\Intern\\\\sensors1\\\\src\\\\CsvGraphPlotter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Papa from \"papaparse\";\nimport { Line } from \"react-chartjs-2\";\nimport \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CsvGraphPlotter = () => {\n  _s();\n  const [data, setData] = useState([]); // Stores parsed CSV data\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current row\n  const [chartData, setChartData] = useState(null); // Stores the chart data\n\n  // Automatically update the graph every second\n  useEffect(() => {\n    if (data.length > 0) {\n      const interval = setInterval(() => {\n        updateChart(currentIndex); // Update chart for the current row\n        setCurrentIndex(prevIndex => (prevIndex + 1) % data.length); // Loop through rows\n      }, 1000); // Update every 1 second\n      return () => clearInterval(interval); // Clear interval on component unmount\n    }\n  }, [data, currentIndex]);\n\n  // Handle CSV file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      Papa.parse(file, {\n        complete: result => {\n          const parsedData = result.data.filter(row => row.length === 53); // Validate rows\n          setData(parsedData); // Save parsed data\n          updateChart(0); // Start charting with the first row\n        },\n        header: false,\n        skipEmptyLines: true\n      });\n    }\n  };\n\n  // Update the chart for the current row\n  const updateChart = rowIndex => {\n    const row = data[rowIndex]; // Get the current row\n    const xLabels = Array.from({\n      length: 52\n    }, (_, idx) => `Column ${idx + 1}`); // X-axis: Columns\n    const yValues = row.slice(0, 52).map(value => parseFloat(value)); // Y-axis: Values of the row\n\n    setChartData({\n      labels: xLabels,\n      datasets: [{\n        label: `Row ${rowIndex + 1}`,\n        data: yValues,\n        borderColor: \"rgba(75, 192, 192, 0.6)\",\n        backgroundColor: \"rgba(75, 192, 192, 0.4)\",\n        borderWidth: 2,\n        pointRadius: 3,\n        fill: true\n      }]\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CSV File Graph Plotter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: handleFileUpload,\n      style: {\n        margin: \"20px\",\n        padding: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px auto\",\n        width: \"80%\",\n        height: \"500px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: \"Columns\",\n                font: {\n                  size: 14\n                }\n              },\n              grid: {\n                display: true\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: \"Values\",\n                font: {\n                  size: 14\n                }\n              },\n              grid: {\n                display: true\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: \"top\"\n            },\n            tooltip: {\n              mode: \"index\",\n              intersect: false\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"#888\"\n      },\n      children: \"Upload a CSV file to display the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(CsvGraphPlotter, \"+Yb6qR5UOjHdBuiY6zUiGNDVCvM=\");\n_c = CsvGraphPlotter;\nexport default CsvGraphPlotter;\nvar _c;\n$RefreshReg$(_c, \"CsvGraphPlotter\");","map":{"version":3,"names":["React","useState","useEffect","Papa","Line","jsxDEV","_jsxDEV","CsvGraphPlotter","_s","data","setData","currentIndex","setCurrentIndex","chartData","setChartData","length","interval","setInterval","updateChart","prevIndex","clearInterval","handleFileUpload","event","file","target","files","parse","complete","result","parsedData","filter","row","header","skipEmptyLines","rowIndex","xLabels","Array","from","_","idx","yValues","slice","map","value","parseFloat","labels","datasets","label","borderColor","backgroundColor","borderWidth","pointRadius","fill","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","margin","width","height","options","responsive","maintainAspectRatio","scales","x","title","display","text","font","size","grid","y","plugins","legend","position","tooltip","mode","intersect","color","_c","$RefreshReg$"],"sources":["C:/Users/Admin/OneDrive/Desktop/Intern/sensors1/src/CsvGraphPlotter.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chart.js/auto\";\r\n\r\nconst CsvGraphPlotter = () => {\r\n  const [data, setData] = useState([]); // Stores parsed CSV data\r\n  const [currentIndex, setCurrentIndex] = useState(0); // Tracks the current row\r\n  const [chartData, setChartData] = useState(null); // Stores the chart data\r\n\r\n  // Automatically update the graph every second\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      const interval = setInterval(() => {\r\n        updateChart(currentIndex); // Update chart for the current row\r\n        setCurrentIndex((prevIndex) => (prevIndex + 1) % data.length); // Loop through rows\r\n      }, 1000); // Update every 1 second\r\n      return () => clearInterval(interval); // Clear interval on component unmount\r\n    }\r\n  }, [data, currentIndex]);\r\n\r\n  // Handle CSV file upload\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      Papa.parse(file, {\r\n        complete: (result) => {\r\n          const parsedData = result.data.filter((row) => row.length === 53); // Validate rows\r\n          setData(parsedData); // Save parsed data\r\n          updateChart(0); // Start charting with the first row\r\n        },\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Update the chart for the current row\r\n  const updateChart = (rowIndex) => {\r\n    const row = data[rowIndex]; // Get the current row\r\n    const xLabels = Array.from({ length: 52 }, (_, idx) => `Column ${idx + 1}`); // X-axis: Columns\r\n    const yValues = row.slice(0, 52).map((value) => parseFloat(value)); // Y-axis: Values of the row\r\n\r\n    setChartData({\r\n      labels: xLabels,\r\n      datasets: [\r\n        {\r\n          label: `Row ${rowIndex + 1}`,\r\n          data: yValues,\r\n          borderColor: \"rgba(75, 192, 192, 0.6)\",\r\n          backgroundColor: \"rgba(75, 192, 192, 0.4)\",\r\n          borderWidth: 2,\r\n          pointRadius: 3,\r\n          fill: true,\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>CSV File Graph Plotter</h1>\r\n      {/* File Upload */}\r\n      <input\r\n        type=\"file\"\r\n        accept=\".csv\"\r\n        onChange={handleFileUpload}\r\n        style={{ margin: \"20px\", padding: \"10px\" }}\r\n      />\r\n      {/* Graph */}\r\n      {chartData ? (\r\n        <div style={{ margin: \"20px auto\", width: \"80%\", height: \"500px\" }}>\r\n          <Line\r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              scales: {\r\n                x: {\r\n                  title: { display: true, text: \"Columns\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                },\r\n                y: {\r\n                  title: { display: true, text: \"Values\", font: { size: 14 } },\r\n                  grid: { display: true },\r\n                },\r\n              },\r\n              plugins: {\r\n                legend: { display: true, position: \"top\" },\r\n                tooltip: { mode: \"index\", intersect: false },\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <p style={{ color: \"#888\" }}>Upload a CSV file to display the graph.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CsvGraphPlotter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}